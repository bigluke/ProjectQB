<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="onet.com.teacher.dao.TeacherDao">

<!-- 태용  -->
<sql id="search">
<where>
   <if test="param1 !=''">
      lg.lg_category_code = #{param1}
      <if test="param2 != ''">
         and md.md_category_code = #{param2}
         <if test="param3 != ''">
            and sm.sm_category_code = #{param3}
            <if test = "param6 != ''">
               and (qs.question_type like concat('%',#{param6},'%') 
               or qs.question_name like concat('%',#{param6},'%') 
               or qs.member_id like concat('%',#{param6},'%') 
               or lv.level_name like concat('%',#{param6},'%'))
            </if>
         </if>
         <if test="param3 =='' and param6 !=''">
            and (qs.question_type like concat('%',#{param6},'%') 
               or qs.question_name like concat('%',#{param6},'%') 
               or qs.member_id like concat('%',#{param6},'%') 
               or lv.level_name like concat('%',#{param6},'%')
               or sm.sm_category_code = #{param3})
         </if>
      </if>
      <if test="param2 =='' and param6 !=''">
         and (qs.question_type like concat('%',#{param6},'%') 
               or qs.question_name like concat('%',#{param6},'%') 
               or qs.member_id like concat('%',#{param6},'%') 
               or lv.level_name like concat('%',#{param6},'%')
               or sm.sm_category_code = #{param3}
               or md.md_category_code = #{param2})
      </if>
   </if>
   <if test="param4 !=''">
      and lv.level_code=#{param4}
   </if>
   <if test="param5 !=''">
      and qs.question_type=#{param5}
   </if>
    <if test="param1 == '' and param6 != ''">
      and qs.question_type like concat('%',#{param6},'%') 
            or qs.question_name like concat('%',#{param6},'%') 
            or qs.member_id like concat('%',#{param6},'%') 
            or lv.level_name like concat('%',#{param6},'%') 
            or sm.sm_category_name like concat('%',#{param6},'%') 
            or md.md_category_name like concat('%',#{param6},'%') 
            or lg.lg_category_name like concat('%',#{param6},'%')
   </if>
</where>
</sql>

<!-- 시험지만들기 문제 검색 -->
<select id="questionSearch" resultType="onet.com.vo.QuestionDto">
	select * from question qs join question_sm_category sm on (qs.sm_category_code = sm.sm_category_code) 
	join question_md_category md on (sm.md_category_code = md.md_category_code) 
	join question_lg_category lg on (lg.lg_category_code = md.lg_category_code)
	join question_level lv on (qs.level_code = lv.level_code)
	<include refid="search"></include>
	order by question_num;
</select>

<!-- 내시험지 리스트 뿌려주기 -->
<select id="myExamPaperList" resultType="onet.com.vo.ExamPaperDto">
	select * from exam_paper where member_id = #{param1} and exam_paper_status = true and exam_paper_enable = true order by exam_paper_num desc
</select>
<!-- 내 임시시헙지 리스트 뿌려주기 -->
<select id="myTempExamList" resultType="onet.com.vo.ExamPaperDto">
	select * from exam_paper where member_id = #{param1} and exam_paper_status = false order by exam_paper_num desc
</select>

<!-- 시험 일정 리스트 뿌려주기 -->
<select id="examScheduleList" resultType="onet.com.vo.ExamInfoDto">
	select * from exam_info where class_name = (select class_name from member where member_id = #{member_id}) order by exam_info_date desc
</select>


<select id="examScheduleList2" resultType="onet.com.vo.ExamInfoDto">
	select * from exam_info where exam_paper_num = #{exam_paper_num}
</select>




<!-- 시험지 삭제 -->
<delete id="deleteExam">
	delete from exam_paper where exam_paper_num = #{param1}
</delete>
<!-- 내시험지 삭제 -->

<update id="updateExam">

	update exam_paper set exam_paper_enable=false where exam_paper_num = #{param1}
</update>

<select id="updateExamView" resultType="onet.com.vo.ExamPaperUpdateDto">
	select q.question_num, q.question_name, q.question_img, q.question_answer, q.question_correct_ratio, eq.exam_question_score, eq.exam_question_seq, ql.level_name, md.md_category_name, sm.sm_category_name, q.member_id 
	from exam_paper ep join exam_question eq on(ep.exam_paper_num = eq.exam_paper_num) 
	join question q on(eq.question_num = q.question_num) 
	join question_sm_category sm on(q.sm_category_code = sm.sm_category_code)
	join question_md_category md on(sm.md_category_code = md.md_category_code) 
	join question_level ql on(q.level_code = ql.level_code)
	where eq.exam_paper_num =#{param1} order by eq.exam_question_seq asc
</select>

<select id="checkExamInfo" resultType="int">
	select count(*) from exam_info where exam_paper_num = #{param1}
</select>

<select id="checkDate" resultType="int">
<![CDATA[
	select count(*) from exam_info where exam_paper_num = #{param1} and exam_info_date > now()
]]>
</select>

<!-- 태용 끝 -->
<!-- 민지 시작 -->
<select id="classMemberList" resultType="onet.com.vo.MemberDto">
	select member_id, member_name from member where class_name = (select class_name from member where member_id = (select member_id from exam_paper where exam_paper_num = #{param1}));
</select>
<select id="classMemberListUpdate" resultType="onet.com.vo.MemberDto">
select member_id, member_name from member where class_name=(select class_name from exam_info where exam_info_num = #{exam_info_num});
</select>

<select id="classInfo" resultType="onet.com.vo.ClassDto">
	select class_num,class_name from class where class_name = (select class_name from member where member_id = (select member_id from exam_paper where exam_paper_num = #{param1}));
</select>
<!-- 민지끝  -->

<!-- 한결 : 강사 문제 리스트 불러오기 시작-->
<select id="question" parameterType="hashmap" resultType="onet.com.vo.QuestionDto">
	select question_num, question_type,question_name, question_img,question_answer,question_correct_ratio,question_select_count, sm_category_code,
	(select md_category_code from question_md_category where md_category_code = (select md_category_code from question_sm_category where sm_category_code = question.sm_category_code)) as 'md_category_code',
	(select lg_category_code from question_lg_category where lg_category_code = (select lg_category_code from question_md_category where md_category_code = (select md_category_code from question_sm_category where sm_category_code = question.sm_category_code))) as 'lg_category_code',
   (select sm_category_name from question_sm_category where sm_category_code = question.sm_category_code) as 'sm_category_name',
   (select md_category_name from question_md_category where md_category_code = (select md_category_code from question_sm_category where sm_category_code = question.sm_category_code)) as 'md_category_name',
   (select lg_category_name from question_lg_category where lg_category_code = (select lg_category_code from question_md_category where md_category_code = (select md_category_code from question_sm_category where sm_category_code = question.sm_category_code))) as 'lg_category_name',
   (select level_name from question_level where level_code = question.level_code) as 'level_name',
   member_id
   from question
</select>
<select id="question_choice" parameterType="hashmap" resultType="onet.com.vo.Question_choiceDto">
	select * from question_choice
</select>
<select id="question_level" parameterType="hashmap" resultType="onet.com.vo.Question_levelDto">
	select * from question_level
</select>
<!-- 한결 : 강사 문제 리스트 불러오기 끝-->

<!-- ################ 재훈 시작 #################  -->
<!-- 강사 내가만든문제 리스트 -->
<select id="teacherMyQuestion" parameterType="hashmap" resultType="onet.com.vo.QuestionDto">
	select question_num, question_type,question_name, question_img,question_answer,question_correct_ratio,question_select_count, sm_category_code,
	(select md_category_code from question_md_category where md_category_code = (select md_category_code from question_sm_category where sm_category_code = question.sm_category_code)) as 'md_category_code',
	(select lg_category_code from question_lg_category where lg_category_code = (select lg_category_code from question_md_category where md_category_code = (select md_category_code from question_sm_category where sm_category_code = question.sm_category_code))) as 'lg_category_code',
   (select sm_category_name from question_sm_category where sm_category_code = question.sm_category_code) as 'sm_category_name',
   (select md_category_name from question_md_category where md_category_code = (select md_category_code from question_sm_category where sm_category_code = question.sm_category_code)) as 'md_category_name',
   (select lg_category_name from question_lg_category where lg_category_code = (select lg_category_code from question_md_category where md_category_code = (select md_category_code from question_sm_category where sm_category_code = question.sm_category_code))) as 'lg_category_name',
   (select level_name from question_level where level_code = question.level_code) as 'level_name',
   member_id
   from question where member_id=#{param1} order by question_num desc;
</select>
<!-- 강사 내가만든문제 조건&키워드별 검색 -->
<select id="teacherMyQuestionSearch" resultType="onet.com.vo.QuestionDto">
	select * from question qs join question_sm_category sm on (qs.sm_category_code = sm.sm_category_code) 
	join question_md_category md on (sm.md_category_code = md.md_category_code) 
	join question_lg_category lg on (lg.lg_category_code = md.lg_category_code)
	join question_level lv on (qs.level_code = lv.level_code)
	<include refid="search"></include> and qs.member_id=#{param7}
	order by question_num desc;
</select>
<!-- ################ 재훈 끝 #################  -->


<!-- 영준 10.16 내 시험지 리스트 불러오기 시작 -->
<select id="examPaperList" parameterType="onet.com.vo.ExamPaperDto" resultType="onet.com.vo.ExamPaperDto">

	select * from exam_paper 
	where member_id = (select member_id from member_role where member_id in 
	(select m.member_id from member m, class c where  c.class_num=#{class_num} and c.class_name=m.class_name) and role_code='role_teacher');

</select>
<!-- 영준 10.16 내 시험지 끝 -->


<!-- 민지-10.18 시험등록 -->
<insert id="examInfoInsert" parameterType="onet.com.vo.ExamInfoDto">
 INSERT INTO exam_info(exam_paper_num, class_name, exam_info_name,exam_info_desc,exam_info_member,exam_info_date,exam_info_start,exam_info_end,exam_info_time)
        VALUES(#{exam_paper_num},#{class_name},#{exam_info_name},#{exam_info_desc},#{exam_info_member},#{exam_info_date},#{exam_info_start},#{exam_info_end},#{exam_info_time})     
</insert>

<insert id="examMemberInsert" parameterType="onet.com.vo.ExamMemberDto">
INSERT INTO exam_member values(#{exam_info_num},#{member_id})
</insert>
<!-- 민지 10.18 시험등록 끝 -->

<!-- 한결 10.17 
시험지 생성 및 임시저장 확인용 시작-->
<select id="examPaperCheck" parameterType="String" resultType="String">
	select exam_paper_num from exam_paper where exam_paper_name = #{exam_paper_name}
</select>
<!-- 시험지 테이블에 insert and update -->
<insert id="examPaperInsert">
	insert into exam_paper(exam_paper_name, member_id, exam_paper_desc, exam_paper_status) values(#{param1}, #{param2}, #{param3}, #{param4} )
</insert>
<update id="examPaperUpdate">
	update  exam_paper set exam_paper_name=#{param1},member_id=#{param2},exam_paper_desc=#{param3},exam_paper_status=#{param5} where exam_paper_num = #{param4}
</update>
<!-- 시험지 문제 테이블에 select insert update delete -->
<select id="examQuestionSelect" parameterType="String" resultType="Integer">
	select question_num from exam_question where exam_paper_num = #{param1} and question_num = #{param2}
</select>
<insert id="examQuestionInsert">
	insert into exam_question(exam_paper_num,question_num, exam_question_seq, exam_question_score) values(#{param1}, #{param2}, #{param3}, #{param4})
</insert>
<delete id="examQuestionDelete" parameterType="String">
	delete from exam_question where exam_paper_num=#{param1}
</delete>

<!-- 한결 10.17 끝-->

<!-- 영준 10.18 시험 일정 삭제 시작 -->
<delete id="teacherExamSchedultDelete" parameterType="onet.com.vo.ExamInfoDto">
	DELETE FROM exam_info WHERE exam_info_num=#{exam_info_num}
</delete>

<!-- 민지 10.22 시험일정 수정 시작 -->
<select id="classExamList" parameterType="onet.com.vo.ExamInfoDto" resultType="onet.com.vo.ExamInfoDto">
select * from exam_info where exam_info_num=#{exam_info_num}

</select>

<update id="examInfoIUpdate" parameterType="onet.com.vo.ExamInfoDto">
	update exam_info set exam_info_desc=#{exam_info_desc}, exam_info_member=#{exam_info_member}, exam_info_date=#{exam_info_date}, exam_info_start=#{exam_info_start},exam_info_end=#{exam_info_end}, exam_info_time=#{exam_info_time} where exam_info_num = #{exam_info_num}
</update>
<!-- 민지 10.22 시험일정 수정 끝 -->

</mapper>


