<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="onet.com.admin.dao.AdminDao">
<!-- 태용 시작 -->
<sql id="search">
	<if test="param1 ==''">
		where class_name like concat('%',#{param2},'%') or teacher_name like concat('%',#{param2},'%')
	</if>
	<if test='param1 =="n"'>
		where class_name like concat('%',#{param2},'%')
	</if>
	<if test='param1 =="t"'>
		where teacher_name like concat('%',#{param2},'%')
	</if>
</sql>

<select id="adminMainView" resultType="onet.com.vo.ClassDto">
	select * from class
</select>

<select id="classSearch" resultType="onet.com.vo.ClassDto">
	select * from class <include refid="search"></include>
</select>

<insert id="classInsert" parameterType="onet.com.vo.ClassDto">
	insert into class(class_name, teacher_name, class_start_date, class_end_date, class_enable) values(#{class_name}, #{teacher_name}, #{class_start_date}, #{class_end_date}, 1);
</insert>
<select id="classCheck" resultType="String">
	select class_name from class where class_name = #{class_name}
</select>

<!-- 태용 끝 -->

<!-- 재훈 - 10.08 문제분류관련 (문제관리페이지 시작 -->

<select id="lgCategoryList" parameterType="hashmap" resultType="onet.com.vo.CategoryDto">
	select * from question_lg_category
</select>
<select id="mdCategoryList" parameterType="hashmap" resultType="onet.com.vo.CategoryDto">
	select * from question_md_category
</select>
<select id="smCategoryList" parameterType="hashmap" resultType="onet.com.vo.CategoryDto">
	select * from question_sm_category
</select>

<!-- 재훈 - 10.08 문제분류관련 끝 -->

<!-- 재훈 - 10.15 문제난이도 관련 시작 -->
<select id="questionLevelList" parameterType="hashmap" resultType="onet.com.vo.CategoryDto">
	select * from question_level
</select>
<!-- 재훈 - 10.15 문제난이도 관련 끝 -->

<!-- 재훈 - 10.15 새 문제 만들기 관련 시작-->
<insert id="insertQuestion" parameterType="onet.com.vo.QuestionDto"
useGeneratedKeys="true" keyProperty="question_num" keyColumn="question_num">

	insert into question(question_type,question_name,question_img,
	question_answer,sm_category_code,level_code,member_id) 
	values(#{question_type},#{question_name},#{question_img},#{question_answer},#{sm_category_code},#{level_code},#{member_id});

	<selectKey keyProperty="question_num" resultType="int" order="AFTER">
        SELECT LAST_INSERT_ID();
    </selectKey> 
    
</insert>

<insert id="insertQuestionChoice">
	insert into question_choice(question_num, question_choice_num, question_choice_content) 
	values(#{param1},#{param2},#{param3});
</insert>

<!-- 재훈 - 10.15 새 문제 만들기 관련 끝 -->

<!-- 영준 - 10.10 회원관리 관련 시작 -->
<select id="memberList" parameterType="hashmap" resultType="onet.com.vo.MemberDto">
	select m.class_name, m.member_id, m.member_name, m.member_email,
	m.member_phone, mr.role_code, r.role_desc,m.member_enable 
	from member m, member_role mr, role r
	where m.member_id=mr.member_id and mr.role_code = r.role_code
</select>

<select id="adminMemberView" resultType="onet.com.vo.MemberDto">
	SELECT m.class_name, m.member_id, m.member_name, m.member_email,
	m.member_phone, mr.role_code, r.role_desc, m.member_enable
    FROM member m, member_role mr, role r
    WHERE m.member_id=mr.member_id and mr.role_code = r.role_code
</select>
<!-- 영준 10.20 회원관리 회원권한 셀렉트 시작 -->
<select id="roleList" parameterType="hashmap" resultType="onet.com.vo.RoleDto">
	SELECT * FROM role
	WHERE not role_code='ROLE_ADMIN'
</select>

<!-- 영준 10.20 회원관리 회원권한 셀렉트 끝 -->

<select id="memberSearch" resultType="onet.com.vo.MemberDto">
	select m.class_name, m.member_id, m.member_name, m.member_email,
	m.member_phone, mr.role_code, r.role_desc, m.member_enable  
	from member m, member_role mr, role r
	<include refid="search"></include>
</select>

<!-- 영준 - 10.12 회원관리 회원정보 수정 시작 -->
<update id="updateMember" parameterType="onet.com.vo.MemberDto">
	UPDATE member m, member_role mr
	SET m.member_email=#{member_email}, 
	m.member_phone=#{member_phone}, m.class_name=#{class_name},
	mr.role_code=#{role_code}
	where m.member_id=#{member_id} and mr.member_id=#{member_id}
</update>
<!-- 영준 - 10.12 회원관리 회원정보 수정 끝 -->

<!-- 영준 10.15 회원정보 삭제(실제 삭제X) 시작 -->
<update id="deleteMember" parameterType="onet.com.vo.MemberDto">
	UPDATE member m, member_role mr
	SET mr.role_code='ROLE_MEMBER', m.member_enable=0
	WHERE m.member_id=#{member_id} and mr.member_id=#{member_id}
</update>
<!-- 영준 10.15 회원정보 삭제(실제 삭제X) 끝 -->

<!-- 영준 - 10.10 회원관리 관련 끝 -->


<!-- 민지 10.12 클래스멤버리스트 ,클래스 리스트 관련  -->

<select id="classList" parameterType="hashmap" resultType="onet.com.vo.ClassDto">
	select class_name, teacher_name, class_start_date, class_end_date, class_enable, class_num
	 from class <include refid="search"></include>
</select>

<select id="classlist" parameterType="onet.com.vo.ClassDto" resultType="onet.com.vo.ClassDto">
	select class_name, teacher_name, class_start_date, class_end_date, class_enable
	 from class where class_num=#{class_num}
</select>
<!-- 클래스 멤버 수정 -->
 <update id="classMemberUpdate" parameterType="onet.com.vo.MemberDto">
 UPDATE member m, member_role mr SET m.member_email=#{member_email}, m.member_phone=#{member_phone}, m.class_name=#{class_name}, mr.role_code=#{role_code} where m.member_id=#{member_id} and mr.member_id=#{member_id}
 </update>

<!-- 민지 10.12 클래스멤버리스트 관련 끝 -->


<!-- 민지 10.15 클래스 수정 관련 -->
<update id="classUpdate" parameterType="onet.com.vo.ClassDto">
 UPDATE class SET class_name=#{class_name}, teacher_name=#{teacher_name},class_start_date=#{class_start_date}, class_end_date=#{class_end_date} where class_num=#{class_num}
 </update>
<!-- 민지 10.15 클래스 수정 관련 끝 -->


<!-- 민지 10.13 클래스 멤버 삭제 관련 -->
 <update id="classMemberDelete" parameterType="onet.com.vo.MemberDto">
 UPDATE member m, member_role mr SET m.class_name='no_class', mr.role_code='ROLE_MEMBER' where m.member_id=#{member_id} and mr.member_id=#{member_id}
</update>
<!-- 민지 10.13 클래스 멤버 삭제 관련 끝 -->



<!-- 정원 10.15 문제분류관리 insert 시작 -->

<!-- +1 해주기 위해서 마지막 행 값 가져오는 쿼리 -->
<select id="lgCatAddCheak" resultType="int">
	select CONVERT(substring(lg_category_code, 2), UNSIGNED) as cate_num from question_lg_category order by cate_num desc limit 1
</select>

<select id="mdCatAddCheck" resultType="int">
	select CONVERT(substring(md_category_code, 2), UNSIGNED) as cate_num from question_md_category order by cate_num desc limit 1
</select>

<select id="smCatAddCheck" resultType="int">
	select CONVERT(substring(sm_category_code, 2), UNSIGNED) as cate_num from question_sm_category order by cate_num desc limit 1
</select>

<!-- 대분류,중분류,소분류 데이터 추가 쿼리 -->
<insert id="lgCatAdd" parameterType="onet.com.vo.CategoryDto">
	insert into question_lg_category values (#{lg_category_code},#{lg_category_name})
</insert> 

<insert id="mdCatAdd" parameterType="onet.com.vo.CategoryDto">
	insert into question_md_category values(#{md_category_code},#{md_category_name},#{lg_category_code})
</insert>

<insert id="smCatAdd" parameterType="onet.com.vo.CategoryDto">
	insert into question_sm_category values(#{sm_category_code},#{sm_category_name},#{md_category_code})
</insert>

<!-- select 박스의 name값을 통해 code로 가지고오는 쿼리 -->
<select id="lgCatCode" resultType="String">
	select lg_category_code from question_lg_category where lg_category_name=#{selectLgCat}
</select>

<select id="mdCatCode" resultType="String">
	select md_category_code from question_md_category where md_category_name=#{selectMdCat}
</select>

<!-- 대분류, 중분류, 소분류 중복값 비교 쿼리 -->
<select id="lgCatAddIdCheck" parameterType="String" resultType="String">
	select lg_category_name from question_lg_category where lg_category_name=#{lgCatAdd}
</select>

<select id="mdCatAddIdCheck" parameterType="String" resultType="String">
	select md_category_name from question_md_category where md_category_name=#{mdCatAdd}
</select>

<select id="smCatAddIdCheck" parameterType="String" resultType="String">
	select sm_category_name from question_sm_category where sm_category_name=#{smCatAdd}
</select>

<!-- 정원 10.15 문제분류관리 insert 끝 -->


<!-- 정원 10.16 문제분류관리 -->

<!-- 테이블 정렬 쿼리 -->
<select id="lgProblemCategoryList" parameterType="hashmap" resultType="onet.com.vo.CategoryDto">
	select * from question_lg_category order by length(lg_category_code) asc, lg_category_code asc
</select>

<select id="mdProblemCategoryList" parameterType="hashmap" resultType="onet.com.vo.CategoryDto">
	select lg_category_code, md_category_code, md_category_name 
	from question_md_category order by length(md_category_code) asc, md_category_code asc
</select>

<select id="smProblemCategoryList" parameterType="hashmap" resultType="onet.com.vo.CategoryDto">
	select md_category_code, sm_category_code, sm_category_name 
	from question_sm_category order by length(sm_category_code) asc, sm_category_code asc
</select>

<!-- 정원 10.16 끝 -->

<!-- 정원 10.17 시작 -->

<!-- 문제분류관리 update 쿼리 -->
<update id="lgUpdate" parameterType="onet.com.vo.CategoryDto">
	update question_lg_category set lg_category_name = #{lg_category_name} where lg_category_code = #{lg_category_code}
</update>

<update id="mdUpdate" parameterType="onet.com.vo.CategoryDto">
	update question_md_category set lg_category_code = #{lg_category_code}, md_category_name = #{md_category_name} where md_category_code = #{md_category_code}
</update>

<update id="smUpdate" parameterType="onet.com.vo.CategoryDto">
	update question_sm_category set md_category_code = #{md_category_code}, sm_category_name = #{sm_category_name} where sm_category_code = #{sm_category_code}
</update>

<!-- 정원 10.17 끝 -->


<!-- 정원 문제분류 삭제 -->
<delete id="lgDelete" parameterType="onet.com.vo.MemberDto">
	delete from question_lg_category where lg_category_code = #{lg_category_code}
</delete>

<delete id="mdDelete" parameterType="onet.com.vo.MemberDto">
	delete from question_md_category where md_category_code = #{md_category_code}
</delete>

<delete id="smDelete" parameterType="onet.com.vo.MemberDto">
	delete from question_sm_category where sm_category_code = #{sm_category_code}
</delete>

<select id="questionDeleteSearch" parameterType="String" resultType="onet.com.vo.CategoryDto">
	select sm_category_code from question where sm_category_code=#{smDeleteCode}
</select>

<select id="questionDeleteSmSearch" parameterType="String" resultType="onet.com.vo.CategoryDto">
	select md_category_code from question_sm_category where md_category_code = #{mdDeleteCode}
</select>

<select id="questionDeleteMdSearch" parameterType="String" resultType="onet.com.vo.CategoryDto">
	select lg_category_code from question_md_category where lg_category_code = #{lgDeleteCode}
</select>

<select id="selectLgList" parameterType="onet.com.vo.CategoryDto" resultType="onet.com.vo.CategoryDto">
	select lg_category_code, lg_category_name from question_lg_category where lg_category_code = #{lg_category_code}
</select>

<select id="selectMdList" parameterType="onet.com.vo.CategoryDto" resultType="onet.com.vo.CategoryDto">
	select lg_category_code, md_category_code, md_category_name from question_md_category where lg_category_code = #{lg_category_code}
</select>

<select id="selectSmList" parameterType="onet.com.vo.CategoryDto" resultType="onet.com.vo.CategoryDto">
	select md_category_code, sm_category_code, sm_category_name from question_sm_category
	where md_category_code = ANY(select md_category_code from question_md_category where lg_category_code = #{lg_category_code})
</select>

<select id="selectMdRealList" parameterType="onet.com.vo.CategoryDto" resultType="onet.com.vo.CategoryDto">
	select md_category_code, md_category_name from question_md_category where md_category_code = #{md_category_code}
</select>

<select id="selectSmRealList" parameterType="onet.com.vo.CategoryDto" resultType="onet.com.vo.CategoryDto">
	select sm_category_code, sm_category_name from question_sm_category where md_category_code = #{md_category_code}
</select>

<select id="selectSmRealList2" parameterType="onet.com.vo.CategoryDto" resultType="onet.com.vo.CategoryDto">
	select sm_category_code, sm_category_name from question_sm_category where sm_category_code = #{sm_category_code}
</select>

</mapper>
